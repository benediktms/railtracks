{"version":3,"sources":["logo.svg","App.tsx","reportWebVitals.ts","components/Footer.tsx","components/Navbar.tsx","layouts/Layout.tsx","index.tsx"],"names":["App","useState","data","setData","fetchData","a","axios","get","response","console","log","error","useEffect","className","Image","src","logo","alt","Button","variantColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Footer","Flex","minH","justify","Navbar","useColorMode","colorMode","toggleColorMode","py","px","IconButton","aria-label","icon","onClick","Layout","children","Box","bg","light","dark","color","ReactDOM","render","StrictMode","ThemeProvider","CSSReset","ColorModeProvider","document","getElementById"],"mappings":"gOAAe,MAA0B,iCCiC1BA,MA5Bf,WAAgB,IAAD,EACWC,qBADX,mBACNC,EADM,KACAC,EADA,KAGPC,EAAS,uCAAG,4BAAAC,EAAA,+EAESC,IAAMC,IAAI,sCAFnB,OAERC,EAFQ,OAGdC,QAAQC,IAAIF,GACZL,EAAQK,GAJM,gDAMdC,QAAQE,MAAR,MANc,yDAAH,qDAcf,OAJAC,qBAAU,WACRR,MACC,IAGD,sBAAKS,UAAU,MAAf,UACE,iCACE,cAACC,EAAA,EAAD,CAAOC,IAAKC,EAAMC,IAAI,WAExB,cAACC,EAAA,EAAD,CAAQC,aAAa,OAArB,uBACCjB,MCdQkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uBCNDQ,EAAS,WACpB,OACE,cAACC,EAAA,EAAD,CAAMC,KAAK,OAAOC,QAAQ,SAA1B,SACE,iCACE,cAACF,EAAA,EAAD,oE,QCJKG,EAAS,WAAO,IAAD,EACaC,cAA/BC,EADkB,EAClBA,UAAWC,EADO,EACPA,gBAEnB,OACE,8BACE,cAACN,EAAA,EAAD,CAAMO,GAAI,EAAGC,GAAI,EAAGN,QAAQ,WAA5B,SACE,cAACO,EAAA,EAAD,CACEC,aAAW,oBACXC,KAAoB,UAAdN,EAAwB,OAAS,MACvCO,QAASN,SCFNO,EAAS,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SACfT,EAAcD,cAAdC,UAIR,OACE,mCACE,eAACU,EAAA,EAAD,CAAKC,GALO,CAAEC,MAAO,QAASC,KAAM,YAKnBb,GAAYc,MAJnB,CAAEF,MAAO,QAASC,KAAM,SAIQb,GAA1C,UACE,eAACU,EAAA,EAAD,CAAKd,KAAK,OAAV,UACE,cAAC,EAAD,IACA,cAACD,EAAA,EAAD,CAAME,QAAQ,SAAd,SAAwBY,OAE1B,cAAC,EAAD,U,gBCfRM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,aAKRC,SAASC,eAAe,SAM1BrC,M","file":"static/js/main.d9c36f38.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import { Button, Image } from '@chakra-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport axios, { AxiosResponse } from 'axios';\nimport logo from './logo.svg';\n\nfunction App() {\n  const [data, setData] = useState<AxiosResponse>();\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get('http://localhost:3000/api/v1/tests');\n      console.log(response);\n      setData(response);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div className='App'>\n      <header>\n        <Image src={logo} alt='logo' />\n      </header>\n      <Button variantColor='blue'>show data</Button>\n      {data}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { Flex } from '@chakra-ui/core';\nimport React from 'react';\n\nexport const Footer = () => {\n  return (\n    <Flex minH='10vh' justify='center'>\n      <footer>\n        <Flex>Made with ❤️ by Benedikt Schnatterbeck</Flex>\n      </footer>\n    </Flex>\n  );\n};\n","import { Flex, IconButton, useColorMode } from '@chakra-ui/core';\nimport React from 'react';\n\nexport const Navbar = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  return (\n    <nav>\n      <Flex py={5} px={5} justify='flex-end'>\n        <IconButton\n          aria-label='toggle color mode'\n          icon={colorMode === 'light' ? 'moon' : 'sun'}\n          onClick={toggleColorMode}\n        />\n      </Flex>\n    </nav>\n  );\n};\n","import { Box, Flex, useColorMode } from '@chakra-ui/core';\nimport React, { ReactNode } from 'react';\nimport { Footer } from '../components/Footer';\nimport { Navbar } from '../components/Navbar';\n\ntype LayoutProps = {\n  title?: string;\n  children: ReactNode;\n};\n\nexport const Layout = ({ children }: LayoutProps) => {\n  const { colorMode } = useColorMode();\n  const bgColor = { light: 'white', dark: 'gray.800' };\n  const color = { light: 'black', dark: 'white' };\n\n  return (\n    <>\n      <Box bg={bgColor[colorMode]} color={color[colorMode]}>\n        <Box minH='90vh'>\n          <Navbar />\n          <Flex justify='center'>{children}</Flex>\n        </Box>\n        <Footer />\n      </Box>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Layout } from './layouts/Layout';\nimport { ColorModeProvider, CSSReset, ThemeProvider } from '@chakra-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider>\n      <CSSReset />\n      <ColorModeProvider>\n        <Layout>\n          <App />\n        </Layout>\n      </ColorModeProvider>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}